import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { 
  BarChart3, 
  Users, 
  Crown, 
  Building2, 
  Plane, 
  PlaneTakeoff, 
  TrendingUp, 
  Settings, 
  LogOut,
  Plus,
  Eye,
  Edit,
  Trash2,
  Bell,
  X,
  Upload,
  MapPin
} from 'lucide-react';

// Modern monocolor icons
const Icons = {
  Dashboard: BarChart3,
  Users: Users,
  Roles: Crown,
  Bases: Building2,
  Fleet: Plane,
  Services: Plane,
  Flights: PlaneTakeoff,
  Reports: TrendingUp,
  Settings: Settings,
  Logout: LogOut
};

// Mock data
const MOCK_DATA = {
  stats: {
    totalUsers: 156,
    totalBases: 8,
    totalServices: 24,
    activeFlights: 12,
    revenue: 125000,
    growth: 15.3
  },
  recentUsers: [
    { id: 1, firstName: 'John', lastName: 'Smith', email: 'john@example.com', role: 'PILOT', status: 'ACTIVE', joined: '2024-07-01', imageUrl: '' },
    { id: 2, firstName: 'Sarah', lastName: 'Johnson', email: 'sarah@example.com', role: 'STUDENT', status: 'ACTIVE', joined: '2024-06-30', imageUrl: '' },
    { id: 3, firstName: 'Mike', lastName: 'Wilson', email: 'mike@example.com', role: 'INSTRUCTOR', status: 'PENDING', joined: '2024-06-29', imageUrl: '' },
  ],
  recentFlights: [
    { id: 1, pilot: 'John Smith', aircraft: 'Cessna 172', duration: '2.5h', status: 'COMPLETED', date: '2024-07-02' },
    { id: 2, pilot: 'Sarah Johnson', aircraft: 'Piper Arrow', duration: '1.8h', status: 'IN_PROGRESS', date: '2024-07-02' },
    { id: 3, pilot: 'Mike Wilson', aircraft: 'Cessna 172', duration: '3.2h', status: 'SCHEDULED', date: '2024-07-03' },
  ]
};

type MenuItem = {
  id: string;
  label: string;
  icon: React.ComponentType<any>;
  active?: boolean;
};

export const AdminPage: React.FC = () => {
  const [activeSection, setActiveSection] = useState('dashboard');
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [showAddBaseModal, setShowAddBaseModal] = useState(false);
  const [showViewBaseModal, setShowViewBaseModal] = useState(false);
  const [showEditBaseModal, setShowEditBaseModal] = useState(false);
  const [showAddUserModal, setShowAddUserModal] = useState(false);
  const [showViewUserModal, setShowViewUserModal] = useState(false);
  const [showEditUserModal, setShowEditUserModal] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [bases, setBases] = useState<any[]>([]);
  const [users, setUsers] = useState<any[]>([]);
  const [selectedBase, setSelectedBase] = useState<any>(null);
  const [selectedUser, setSelectedUser] = useState<any>(null);
  const [baseFormData, setBaseFormData] = useState({
    name: '',
    description: '',
    address: '',
    city: '',
    region: '',
    country: '',
    postalCode: '',
    latitude: '',
    longitude: '',
    icaoCode: '',
    iataCode: '',
    runwayLength: '',
    runwaySurface: '',
    elevation: '',
    frequency: '',
    operatingHours: '',
    phone: '',
    email: '',
    website: '',
    imageUrl: '',
    isActive: true
  });
  const [userFormData, setUserFormData] = useState({
    email: '',
    firstName: '',
    lastName: '',
    phoneNumber: '',
    role: 'student_pilot',
    status: 'pending',
    address: '',
    city: '',
    region: '',
    country: '',
    postalCode: '',
    nationality: '',
    dateOfBirth: '',
    nationalId: '',
    sex: '',
    imageUrl: '',
    hasPPL: false,
    pplNumber: '',
    pplIssueDate: '',
    pplExpiryDate: '',
    medicalCertificateNumber: '',
    medicalExamDate: '',
    medicalIssueDate: '',
    medicalExpiryDate: '',
    totalFlightHours: 0,
    creditedHours: 0
  });
  const [imageUploading, setImageUploading] = useState(false);
  const [imageUploadError, setImageUploadError] = useState('');
  const [updatingUser, setUpdatingUser] = useState(false);
  const [userUpdateKey, setUserUpdateKey] = useState(0);
  const [currentUserRole, setCurrentUserRole] = useState('super_admin'); // For demo - in real app this would come from auth context
  const [showAddRoleModal, setShowAddRoleModal] = useState(false);
  const [showEditRoleModal, setShowEditRoleModal] = useState(false);
  const [selectedRole, setSelectedRole] = useState<any>(null);
  const [roleFormData, setRoleFormData] = useState({
    name: '',
    displayName: '',
    description: '',
    permissions: [] as string[],
    color: 'bg-gray-100 text-gray-800'
  });

  // State for fleet
  const [fleet, setFleet] = useState([
    {
      id: 1,
      callSign: 'YR-CRZ',
      type: 'CRUZ',
      manufacturer: 'Cessna',
      model: '172 Skyhawk',
      seats: 4,
      maxRange: 800,
      cruiseSpeed: 120,
      fuelCapacity: 56,
      yearManufactured: 2020,
      imageUrl: '',
      isActive: true,
      baseId: 1,
      baseName: 'Main Base',
      description: 'Primary training aircraft',
      maintenanceDue: '2024-08-15',
      totalFlightHours: 1250
    }
  ]);
  const [showAddAircraftModal, setShowAddAircraftModal] = useState(false);
  const [showEditAircraftModal, setShowEditAircraftModal] = useState(false);
  const [showViewAircraftModal, setShowViewAircraftModal] = useState(false);
  const [selectedAircraft, setSelectedAircraft] = useState<any>(null);
  const [aircraftFormData, setAircraftFormData] = useState({
    callSign: '',
    type: '',
    manufacturer: '',
    model: '',
    seats: 4,
    maxRange: 0,
    cruiseSpeed: 0,
    fuelCapacity: 0,
    yearManufactured: new Date().getFullYear(),
    description: '',
    isActive: true,
    baseId: 1,
    imageUrl: ''
  });

  const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

  const menuItems: MenuItem[] = [
    { id: 'dashboard', label: 'Dashboard', icon: Icons.Dashboard, active: true },
    { id: 'users', label: 'Users', icon: Icons.Users },
    { id: 'roles', label: 'Roles', icon: Icons.Roles },
    { id: 'bases', label: 'Bases', icon: Icons.Bases },
    { id: 'fleet', label: 'Fleet', icon: Icons.Fleet },
    { id: 'services', label: 'Services', icon: Icons.Services },
    { id: 'flights', label: 'Flights', icon: Icons.Flights },
    { id: 'reports', label: 'Reports', icon: Icons.Reports },
    { id: 'settings', label: 'Settings', icon: Icons.Settings },
  ];

  // Fetch bases from API
  const fetchBases = async () => {
    try {
      const response = await fetch('/api/admin/bases');
      if (response.ok) {
        const data = await response.json();
        setBases(data);
      } else {
        setBases([]);
      }
    } catch (e) {
      setBases([]);
    }
  };

  // Fetch users from API
  const fetchUsers = async () => {
    try {
      const response = await fetch('/api/admin/users');
      if (response.ok) {
        const data = await response.json();
        setUsers(data);
      } else {
        setUsers([]);
      }
    } catch (e) {
      setUsers([]);
    }
  };

  useEffect(() => {
    fetchBases();
    fetchUsers();
  }, []);

  const handleBaseFormChange = (field: string, value: any) => {
    setBaseFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleUserFormChange = (field: string, value: any) => {
    setUserFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateBase = async () => {
    setIsSubmitting(true);
    try {
      const response = await fetch('/api/admin/bases', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...baseFormData,
          latitude: baseFormData.latitude ? parseFloat(baseFormData.latitude) : null,
          longitude: baseFormData.longitude ? parseFloat(baseFormData.longitude) : null,
        }),
      });

      if (response.ok) {
        const newBase = await response.json();
        setShowAddBaseModal(false);
        setBaseFormData({
          name: '',
          description: '',
          address: '',
          city: '',
          region: '',
          country: '',
          postalCode: '',
          latitude: '',
          longitude: '',
          icaoCode: '',
          iataCode: '',
          runwayLength: '',
          runwaySurface: '',
          elevation: '',
          frequency: '',
          operatingHours: '',
          phone: '',
          email: '',
          website: '',
          imageUrl: '',
          isActive: true
        });
        alert('Base created successfully!');
        fetchBases(); // <-- Refetch bases after create
      } else {
        const error = await response.json();
        alert('Failed to create base. Please try again.');
      }
    } catch (error) {
      alert('Error creating base. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // View base handler
  const handleViewBase = (base: any) => {
    setSelectedBase(base);
    setShowViewBaseModal(true);
  };

  // Edit base handler
  const handleEditBase = (base: any) => {
    setSelectedBase(base);
    setBaseFormData({
      name: base.name || '',
      description: base.description || '',
      address: base.address || '',
      city: base.city || '',
      region: base.region || '',
      country: base.country || '',
      postalCode: base.postalCode || '',
      latitude: base.latitude ? base.latitude.toString() : '',
      longitude: base.longitude ? base.longitude.toString() : '',
      icaoCode: base.icaoCode || '',
      iataCode: base.iataCode || '',
      runwayLength: base.runwayLength || '',
      runwaySurface: base.runwaySurface || '',
      elevation: base.elevation || '',
      frequency: base.frequency || '',
      operatingHours: base.operatingHours || '',
      phone: base.phone || '',
      email: base.email || '',
      website: base.website || '',
      imageUrl: base.imageUrl || '',
      isActive: base.isActive
    });
    setShowEditBaseModal(true);
  };

  // Update base handler
  const handleUpdateBase = async () => {
    if (!selectedBase) return;
    
    setIsSubmitting(true);
    try {
      const response = await fetch(`/api/admin/bases/${selectedBase.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...baseFormData,
          latitude: baseFormData.latitude ? parseFloat(baseFormData.latitude) : null,
          longitude: baseFormData.longitude ? parseFloat(baseFormData.longitude) : null,
        }),
      });

      if (response.ok) {
        setShowEditBaseModal(false);
        setSelectedBase(null);
        setBaseFormData({
          name: '',
          description: '',
          address: '',
          city: '',
          region: '',
          country: '',
          postalCode: '',
          latitude: '',
          longitude: '',
          icaoCode: '',
          iataCode: '',
          runwayLength: '',
          runwaySurface: '',
          elevation: '',
          frequency: '',
          operatingHours: '',
          phone: '',
          email: '',
          website: '',
          imageUrl: '',
          isActive: true
        });
        alert('Base updated successfully!');
        fetchBases();
      } else {
        alert('Failed to update base. Please try again.');
      }
    } catch (error) {
      alert('Error updating base. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Delete base handler
  const handleDeleteBase = async (base: any) => {
    if (!confirm(`Are you sure you want to delete "${base.name}"? This action cannot be undone.`)) {
      return;
    }

    try {
      const response = await fetch(`/api/admin/bases/${base.id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        alert('Base deleted successfully!');
        fetchBases();
      } else {
        alert('Failed to delete base. Please try again.');
      }
    } catch (error) {
      alert('Error deleting base. Please try again.');
    }
  };

  // User CRUD functions
  const handleCreateUser = async () => {
    setIsSubmitting(true);
    try {
      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...userFormData,
          dateOfBirth: userFormData.dateOfBirth ? new Date(userFormData.dateOfBirth).toISOString() : null,
          pplIssueDate: userFormData.pplIssueDate ? new Date(userFormData.pplIssueDate).toISOString() : null,
          pplExpiryDate: userFormData.pplExpiryDate ? new Date(userFormData.pplExpiryDate).toISOString() : null,
          medicalExamDate: userFormData.medicalExamDate ? new Date(userFormData.medicalExamDate).toISOString() : null,
          medicalIssueDate: userFormData.medicalIssueDate ? new Date(userFormData.medicalIssueDate).toISOString() : null,
          medicalExpiryDate: userFormData.medicalExpiryDate ? new Date(userFormData.medicalExpiryDate).toISOString() : null,
          totalFlightHours: parseInt(userFormData.totalFlightHours.toString()),
          creditedHours: parseInt(userFormData.creditedHours.toString()),
        }),
      });

      if (response.ok) {
        const newUser = await response.json();
        setShowAddUserModal(false);
        setUserFormData({
          email: '',
          firstName: '',
          lastName: '',
          phoneNumber: '',
          role: 'student_pilot',
          status: 'pending',
          address: '',
          city: '',
          region: '',
          country: '',
          postalCode: '',
          nationality: '',
          dateOfBirth: '',
          nationalId: '',
          sex: '',
          imageUrl: '',
          hasPPL: false,
          pplNumber: '',
          pplIssueDate: '',
          pplExpiryDate: '',
          medicalCertificateNumber: '',
          medicalExamDate: '',
          medicalIssueDate: '',
          medicalExpiryDate: '',
          totalFlightHours: 0,
          creditedHours: 0
        });
        alert('User created successfully!');
        fetchUsers();
      } else {
        const error = await response.json();
        alert('Failed to create user. Please try again.');
      }
    } catch (error) {
      alert('Error creating user. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // View user handler
  const handleViewUser = (user: any) => {
    setSelectedUser(user);
    setShowViewUserModal(true);
  };

  // Edit user handler
  const handleEditUser = (user: any) => {
    setSelectedUser(user);
    setUserFormData({
      email: user.email || '',
      firstName: user.firstName || '',
      lastName: user.lastName || '',
      phoneNumber: user.phoneNumber || '',
      role: user.role || 'student_pilot',
      status: user.status || 'pending',
      address: user.address || '',
      city: user.city || '',
      region: user.region || '',
      country: user.country || '',
      postalCode: user.postalCode || '',
      nationality: user.nationality || '',
      dateOfBirth: user.dateOfBirth ? new Date(user.dateOfBirth).toISOString().split('T')[0] : '',
      nationalId: user.nationalId || '',
      sex: user.sex || '',
      imageUrl: user.imageUrl || '',
      hasPPL: user.hasPPL || false,
      pplNumber: user.pplNumber || '',
      pplIssueDate: user.pplIssueDate ? new Date(user.pplIssueDate).toISOString().split('T')[0] : '',
      pplExpiryDate: user.pplExpiryDate ? new Date(user.pplExpiryDate).toISOString().split('T')[0] : '',
      medicalCertificateNumber: user.medicalCertificateNumber || '',
      medicalExamDate: user.medicalExamDate ? new Date(user.medicalExamDate).toISOString().split('T')[0] : '',
      medicalIssueDate: user.medicalIssueDate ? new Date(user.medicalIssueDate).toISOString().split('T')[0] : '',
      medicalExpiryDate: user.medicalExpiryDate ? new Date(user.medicalExpiryDate).toISOString().split('T')[0] : '',
      totalFlightHours: user.totalFlightHours || 0,
      creditedHours: user.creditedHours || 0
    });
    setShowEditUserModal(true);
  };

  // Update user handler
  const handleUpdateUser = async () => {
    if (!selectedUser) return;
    
    setUpdatingUser(true);
    try {
      const response = await fetch(`/api/admin/users/${selectedUser.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...userFormData,
          dateOfBirth: userFormData.dateOfBirth ? new Date(userFormData.dateOfBirth).toISOString() : null,
          pplIssueDate: userFormData.pplIssueDate ? new Date(userFormData.pplIssueDate).toISOString() : null,
          pplExpiryDate: userFormData.pplExpiryDate ? new Date(userFormData.pplExpiryDate).toISOString() : null,
          medicalExamDate: userFormData.medicalExamDate ? new Date(userFormData.medicalExamDate).toISOString() : null,
          medicalIssueDate: userFormData.medicalIssueDate ? new Date(userFormData.medicalIssueDate).toISOString() : null,
          medicalExpiryDate: userFormData.medicalExpiryDate ? new Date(userFormData.medicalExpiryDate).toISOString() : null,
          totalFlightHours: parseInt(userFormData.totalFlightHours.toString()),
          creditedHours: parseInt(userFormData.creditedHours.toString()),
        }),
      });

      if (response.ok) {
        setShowEditUserModal(false);
        setSelectedUser(null);
        setUserFormData({
          email: '',
          firstName: '',
          lastName: '',
          phoneNumber: '',
          role: 'student_pilot',
          status: 'pending',
          address: '',
          city: '',
          region: '',
          country: '',
          postalCode: '',
          nationality: '',
          dateOfBirth: '',
          nationalId: '',
          sex: '',
          imageUrl: '',
          hasPPL: false,
          pplNumber: '',
          pplIssueDate: '',
          pplExpiryDate: '',
          medicalCertificateNumber: '',
          medicalExamDate: '',
          medicalIssueDate: '',
          medicalExpiryDate: '',
          totalFlightHours: 0,
          creditedHours: 0
        });
        alert('User updated successfully!');
        setUserUpdateKey(prev => prev + 1);
        fetchUsers();
      } else {
        alert('Failed to update user. Please try again.');
      }
    } catch (error) {
      alert('Error updating user. Please try again.');
    } finally {
      setUpdatingUser(false);
    }
  };

  // Delete user handler
  const handleDeleteUser = async (user: any) => {
    if (!confirm(`Are you sure you want to delete "${user.firstName} ${user.lastName}"? This action cannot be undone.`)) {
      return;
    }

    try {
      const response = await fetch(`/api/admin/users/${user.id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        alert('User deleted successfully!');
        fetchUsers();
      } else {
        alert('Failed to delete user. Please try again.');
      }
    } catch (error) {
      alert('Error deleting user. Please try again.');
    }
  };

  const handleImageUpload = async (file: File) => {
    setImageUploading(true);
    setImageUploadError('');
    const formData = new FormData();
    formData.append('file', file);
    try {
      const res = await fetch('/api/admin/bases/upload-image', {
        method: 'POST',
        body: formData,
      });
      const data = await res.json();
      if (data.url) {
        setBaseFormData((prev) => ({ ...prev, imageUrl: data.url }));
      } else {
        setImageUploadError(data.error || 'Upload failed');
      }
    } catch (e) {
      setImageUploadError('Upload failed');
    } finally {
      setImageUploading(false);
    }
  };

  const handleUserImageUpload = async (file: File) => {
    setImageUploading(true);
    setImageUploadError('');
    const formData = new FormData();
    formData.append('file', file);
    try {
      const res = await fetch('/api/admin/users/upload-image', {
        method: 'POST',
        body: formData,
      });
      const data = await res.json();
      if (data.url) {
        setUserFormData((prev) => ({ ...prev, imageUrl: data.url }));
      } else {
        setImageUploadError(data.error || 'Upload failed');
      }
    } catch (e) {
      setImageUploadError('Upload failed');
    } finally {
      setImageUploading(false);
    }
  };

  // Role management functions
  const handleRoleFormChange = (field: string, value: any) => {
    setRoleFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateRole = async () => {
    setIsSubmitting(true);
    try {
      // In a real app, this would be an API call
      console.log('Creating role:', roleFormData);
      setShowAddRoleModal(false);
      setRoleFormData({
        name: '',
        displayName: '',
        description: '',
        permissions: [],
        color: 'bg-gray-100 text-gray-800'
      });
      alert('Role created successfully!');
    } catch (error) {
      alert('Error creating role. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEditRole = (role: any) => {
    setSelectedRole(role);
    setRoleFormData({
      name: role.name,
      displayName: role.displayName,
      description: role.description,
      permissions: role.permissions || [],
      color: role.color
    });
    setShowEditRoleModal(true);
  };

  const handleUpdateRole = async () => {
    if (!selectedRole) return;
    
    setIsSubmitting(true);
    try {
      // In a real app, this would be an API call
      console.log('Updating role:', roleFormData);
      setShowEditRoleModal(false);
      setSelectedRole(null);
      setRoleFormData({
        name: '',
        displayName: '',
        description: '',
        permissions: [],
        color: 'bg-gray-100 text-gray-800'
      });
      alert('Role updated successfully!');
    } catch (error) {
      alert('Error updating role. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteRole = async (role: any) => {
    if (!confirm(`Are you sure you want to delete the "${role.displayName}" role? This action cannot be undone.`)) {
      return;
    }

    try {
      // In a real app, this would be an API call
      console.log('Deleting role:', role);
      alert('Role deleted successfully!');
    } catch (error) {
      alert('Error deleting role. Please try again.');
    }
  };

  const handleAircraftFormChange = (field: string, value: any) => {
    setAircraftFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAircraftImageUpload = async (file: File) => {
    try {
      const formData = new FormData();
      formData.append('image', file);
      
      const response = await fetch('/api/admin/aircraft/upload-image', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        handleAircraftFormChange('imageUrl', data.url);
        alert('Aircraft image uploaded successfully!');
      } else {
        alert('Failed to upload aircraft image. Please try again.');
      }
    } catch (error) {
      alert('Error uploading aircraft image. Please try again.');
    }
  };

  const handleCreateAircraft = async () => {
    setIsSubmitting(true);
    try {
      // In a real app, this would be an API call
      const newAircraft = {
        id: fleet.length + 1,
        ...aircraftFormData,
        baseName: 'Main Base', // In real app, this would come from baseId
        maintenanceDue: '2024-12-31',
        totalFlightHours: 0
      };
      
      setFleet(prev => [...prev, newAircraft]);
      setShowAddAircraftModal(false);
      setAircraftFormData({
        callSign: '',
        type: '',
        manufacturer: '',
        model: '',
        seats: 4,
        maxRange: 0,
        cruiseSpeed: 0,
        fuelCapacity: 0,
        yearManufactured: new Date().getFullYear(),
        description: '',
        isActive: true,
        baseId: 1,
        imageUrl: ''
      });
      alert('Aircraft created successfully!');
    } catch (error) {
      alert('Error creating aircraft. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleViewAircraft = (aircraft: any) => {
    setSelectedAircraft(aircraft);
    setShowViewAircraftModal(true);
  };

  const handleEditAircraft = (aircraft: any) => {
    setSelectedAircraft(aircraft);
    setAircraftFormData({
      callSign: aircraft.callSign,
      type: aircraft.type,
      manufacturer: aircraft.manufacturer,
      model: aircraft.model,
      seats: aircraft.seats,
      maxRange: aircraft.maxRange,
      cruiseSpeed: aircraft.cruiseSpeed,
      fuelCapacity: aircraft.fuelCapacity,
      yearManufactured: aircraft.yearManufactured,
      description: aircraft.description,
      isActive: aircraft.isActive,
      baseId: aircraft.baseId,
      imageUrl: aircraft.imageUrl || ''
    });
    setShowEditAircraftModal(true);
  };

  const handleUpdateAircraft = async () => {
    if (!selectedAircraft) return;
    
    setIsSubmitting(true);
    try {
      // In a real app, this would be an API call
      setFleet(prev => prev.map(aircraft => 
        aircraft.id === selectedAircraft.id 
          ? { ...aircraft, ...aircraftFormData }
          : aircraft
      ));
      
      setShowEditAircraftModal(false);
      setSelectedAircraft(null);
      setAircraftFormData({
        callSign: '',
        type: '',
        manufacturer: '',
        model: '',
        seats: 4,
        maxRange: 0,
        cruiseSpeed: 0,
        fuelCapacity: 0,
        yearManufactured: new Date().getFullYear(),
        description: '',
        isActive: true,
        baseId: 1,
        imageUrl: ''
      });
      alert('Aircraft updated successfully!');
    } catch (error) {
      alert('Error updating aircraft. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteAircraft = async (aircraft: any) => {
    if (!confirm(`Are you sure you want to delete aircraft "${aircraft.callSign}"? This action cannot be undone.`)) {
      return;
    }

    try {
      // In a real app, this would be an API call
      setFleet(prev => prev.filter(a => a.id !== aircraft.id));
      alert('Aircraft deleted successfully!');
    } catch (error) {
      alert('Error deleting aircraft. Please try again.');
    }
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-blue-100 text-blue-600">
              <Users className="h-6 w-6" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Users</p>
              <p className="text-2xl font-semibold text-gray-900">{MOCK_DATA.stats.totalUsers}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100 text-green-600">
              <Building2 className="h-6 w-6" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Bases</p>
              <p className="text-2xl font-semibold text-gray-900">{MOCK_DATA.stats.totalBases}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-purple-100 text-purple-600">
              <Plane className="h-6 w-6" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Services</p>
              <p className="text-2xl font-semibold text-gray-900">{MOCK_DATA.stats.totalServices}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-orange-100 text-orange-600">
              <TrendingUp className="h-6 w-6" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Revenue</p>
              <p className="text-2xl font-semibold text-gray-900">${(MOCK_DATA.stats.revenue / 1000).toFixed(0)}k</p>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Recent Users</h3>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {MOCK_DATA.recentUsers.map((user) => (
                <div key={user.id} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden">
                      {user.imageUrl ? (
                        <img
                          src={`${API_URL}${user.imageUrl}`}
                          alt={`${user.firstName} ${user.lastName}`}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <span className="text-sm font-medium text-gray-600">
                          {user.firstName && user.lastName ? 
                            `${user.firstName[0]}${user.lastName[0]}` : 
                            user.email[0].toUpperCase()
                          }
                        </span>
                      )}
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {user.firstName && user.lastName ? 
                          `${user.firstName} ${user.lastName}` : 
                          'No Name'
                        }
                      </div>
                      <div className="text-sm text-gray-500">{user.email}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      user.status === 'ACTIVE' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {user.status}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Recent Flights</h3>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {MOCK_DATA.recentFlights.map((flight) => (
                <div key={flight.id} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                      <Plane className="h-5 w-5 text-blue-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">{flight.pilot}</p>
                      <p className="text-sm text-gray-500">{flight.aircraft}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm font-medium text-gray-900">{flight.duration}</p>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      flight.status === 'COMPLETED' ? 'bg-green-100 text-green-800' :
                      flight.status === 'IN_PROGRESS' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {flight.status}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderUsers = () => (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200 bg-white sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">User Management</h3>
            <p className="text-sm text-gray-500">Manage all users in the system</p>
          </div>
                      <button 
              onClick={() => setShowAddUserModal(true)}
              className="px-4 py-2 bg-black text-white rounded-md text-sm hover:bg-gray-800"
            >
              Add User
            </button>
        </div>
      </div>
      <div className="p-6">
        <div className="mb-4 flex justify-between items-center">
          <div className="flex space-x-2">
            <input
              type="text"
              placeholder="Search users..."
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700">
              Search
            </button>
          </div>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joined</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {users.length === 0 ? (
                <tr>
                  <td colSpan={5} className="px-6 py-4 text-center text-gray-500">
                    No users found.
                  </td>
                </tr>
              ) : (
                users.map((user) => (
                  <tr key={user.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden">
                          {user.imageUrl ? (
                            <img
                              src={`${API_URL}${user.imageUrl}`}
                              alt={`${user.firstName} ${user.lastName}`}
                              className="w-full h-full object-cover"
                              key={`${user.id}-${userUpdateKey}`}
                            />
                          ) : (
                            <span className="text-sm font-medium text-gray-600">
                              {user.firstName && user.lastName ? 
                                `${user.firstName[0]}${user.lastName[0]}` : 
                                user.email[0].toUpperCase()
                              }
                            </span>
                          )}
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">
                            {user.firstName && user.lastName ? 
                              `${user.firstName} ${user.lastName}` : 
                              'No Name'
                            }
                          </div>
                          <div className="text-sm text-gray-500">{user.email}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                        {user.role?.replace('_', ' ').toUpperCase() || 'N/A'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        user.status === 'active' ? 'bg-green-100 text-green-800' : 
                        user.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        user.status === 'suspended' ? 'bg-red-100 text-red-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {user.status?.toUpperCase() || 'N/A'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => handleViewUser(user)}
                          className="text-blue-600 hover:text-blue-900"
                        >
                          View
                        </button>
                        <button 
                          onClick={() => handleEditUser(user)}
                          className="text-green-600 hover:text-green-900"
                        >
                          Edit
                        </button>
                        <button 
                          onClick={() => handleDeleteUser(user)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderBases = () => (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200 bg-white sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">Base Management</h3>
            <p className="text-sm text-gray-500">Manage aviation bases and locations</p>
          </div>
          <button 
            onClick={() => setShowAddBaseModal(true)}
            className="px-4 py-2 bg-black text-white rounded-md text-sm hover:bg-gray-800"
          >
            Add Base
          </button>
        </div>
      </div>
      <div className="p-6">
        {/* Card Grid Layout */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {bases.length === 0 ? (
            <div className="col-span-full text-center text-gray-400 py-8">No bases found.</div>
          ) : (
            bases.map((base) => (
              <div key={base.id} className="border border-gray-200 rounded-lg p-4 flex flex-col justify-between">
                {/* Base Image */}
                <div className="mb-3 w-full aspect-[4/3] bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                  {base.imageUrl ? (
                    <img src={`${API_URL}${base.imageUrl}`} alt={base.name} className="object-cover w-full h-full" />
                  ) : (
                    <Upload className="h-12 w-12 text-gray-400" />
                  )}
                </div>
                <div>
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-lg font-medium text-gray-900">{base.name}</h4>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${base.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{base.isActive ? 'Active' : 'Inactive'}</span>
                  </div>
                  <div className="space-y-2 text-sm text-gray-600">
                    <p className="flex items-center"><MapPin className="h-4 w-4 mr-1" /> {base.city}{base.city && base.country ? ', ' : ''}{base.country}</p>
                    <p className="flex items-center"><Plane className="h-4 w-4 mr-1" /> ICAO: {base.icaoCode || <span className="text-gray-400">N/A</span>}</p>
                    {base.description && <p className="text-gray-500 mt-2">{base.description}</p>}
                  </div>
                </div>
                {/* Action Buttons */}
                <div className="mt-4 pt-3 border-t border-gray-100">
                  <div className="flex justify-between items-center">
                    <div className="flex space-x-2">
                      <button 
                        onClick={() => handleViewBase(base)}
                        className="px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded hover:bg-blue-100 transition-colors"
                      >
                        View
                      </button>
                      <button 
                        onClick={() => handleEditBase(base)}
                        className="px-3 py-1 text-xs bg-green-50 text-green-600 rounded hover:bg-green-100 transition-colors"
                      >
                        Edit
                      </button>
                    </div>
                    <button 
                      onClick={() => handleDeleteBase(base)}
                      className="px-3 py-1 text-xs bg-red-50 text-red-600 rounded hover:bg-red-100 transition-colors"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  const renderFleet = () => (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200 bg-white sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">Fleet Management</h3>
            <p className="text-sm text-gray-500">Manage aircraft fleet and maintenance</p>
          </div>
          <button 
            onClick={() => {
              setAircraftFormData({
                callSign: '',
                type: '',
                manufacturer: '',
                model: '',
                seats: 4,
                maxRange: 0,
                cruiseSpeed: 0,
                fuelCapacity: 0,
                yearManufactured: new Date().getFullYear(),
                description: '',
                isActive: true,
                baseId: 1,
                imageUrl: ''
              });
              setShowAddAircraftModal(true);
            }}
            className="px-4 py-2 bg-black text-white rounded-md text-sm hover:bg-gray-800"
          >
            Add Aircraft
          </button>
        </div>
      </div>
      <div className="p-6">
        {/* Card Grid Layout */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {fleet.length === 0 ? (
            <div className="col-span-full text-center text-gray-400 py-8">No aircraft found.</div>
          ) : (
            fleet.map((aircraft) => (
              <div key={aircraft.id} className="border border-gray-200 rounded-lg p-4 flex flex-col justify-between">
                {/* Aircraft Image */}
                <div className="mb-3 w-full aspect-[4/3] bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                  {aircraft.imageUrl ? (
                    <img src={`${API_URL}${aircraft.imageUrl}`} alt={aircraft.callSign} className="object-cover w-full h-full" />
                  ) : (
                    <Plane className="h-12 w-12 text-gray-400" />
                  )}
                </div>
                <div>
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-lg font-medium text-gray-900">{aircraft.callSign}</h4>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${aircraft.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{aircraft.isActive ? 'Active' : 'Inactive'}</span>
                  </div>
                  <div className="space-y-2 text-sm text-gray-600">
                    <p className="flex items-center"><Plane className="h-4 w-4 mr-1" /> {aircraft.manufacturer} {aircraft.model}</p>
                    <p className="flex items-center"><Users className="h-4 w-4 mr-1" /> {aircraft.seats} seats</p>
                    <p className="flex items-center"><MapPin className="h-4 w-4 mr-1" /> {aircraft.baseName}</p>
                    <p className="flex items-center"><BarChart3 className="h-4 w-4 mr-1" /> {aircraft.totalFlightHours} hours</p>
                    {aircraft.description && <p className="text-gray-500 mt-2">{aircraft.description}</p>}
                  </div>
                </div>
                {/* Action Buttons */}
                <div className="mt-4 pt-3 border-t border-gray-100">
                  <div className="flex justify-between items-center">
                    <div className="flex space-x-2">
                      <button 
                        onClick={() => handleViewAircraft(aircraft)}
                        className="px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded hover:bg-blue-100 transition-colors"
                      >
                        View
                      </button>
                      <button 
                        onClick={() => handleEditAircraft(aircraft)}
                        className="px-3 py-1 text-xs bg-green-50 text-green-600 rounded hover:bg-green-100 transition-colors"
                      >
                        Edit
                      </button>
                    </div>
                    <button 
                      onClick={() => handleDeleteAircraft(aircraft)}
                      className="px-3 py-1 text-xs bg-red-50 text-red-600 rounded hover:bg-red-100 transition-colors"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  const renderServices = () => (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200 bg-white sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">Service Management</h3>
            <p className="text-sm text-gray-500">Manage flight services and training programs</p>
          </div>
          <button className="px-4 py-2 bg-black text-white rounded-md text-sm hover:bg-gray-800">
            Add Service
          </button>
        </div>
      </div>
      <div className="p-6">
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {[
                { name: 'Flight Training - Private Pilot', type: 'TRAINING', price: 250, active: true, featured: true },
                { name: 'Aircraft Rental - Cessna 172', type: 'RENTAL', price: 180, active: true, featured: true },
                { name: 'Aircraft Rental - Piper Arrow', type: 'RENTAL', price: 220, active: true, featured: false },
                { name: 'Instrument Rating', type: 'TRAINING', price: 350, active: false, featured: false },
              ].map((service, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{service.name}</div>
                    {service.featured && (
                      <div className="text-xs text-blue-600">⭐ Featured</div>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      service.type === 'TRAINING' ? 'bg-purple-100 text-purple-800' : 'bg-green-100 text-green-800'
                    }`}>
                      {service.type}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    ${service.price}/hour
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      service.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {service.active ? 'Active' : 'Inactive'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button className="text-blue-600 hover:text-blue-900 mr-3">
                      Edit
                    </button>
                    <button className="text-red-600 hover:text-red-900">
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderFlights = () => (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200 bg-white sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">Flight Management</h3>
            <p className="text-sm text-gray-500">Monitor and manage all flights</p>
          </div>
          <button className="px-4 py-2 bg-black text-white rounded-md text-sm hover:bg-gray-800">
            Schedule Flight
          </button>
        </div>
      </div>
      <div className="p-6">
        <div className="mb-4 flex justify-between items-center">
          <div className="flex space-x-2">
            <select className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option>All Status</option>
              <option>Scheduled</option>
              <option>In Progress</option>
              <option>Completed</option>
              <option>Cancelled</option>
            </select>
            <button className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700">
              Filter
            </button>
          </div>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Flight</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pilot</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Aircraft</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {MOCK_DATA.recentFlights.map((flight) => (
                <tr key={flight.id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">Flight #{flight.id}</div>
                    <div className="text-sm text-gray-500">{flight.date}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{flight.pilot}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{flight.aircraft}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{flight.duration}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      flight.status === 'COMPLETED' ? 'bg-green-100 text-green-800' :
                      flight.status === 'IN_PROGRESS' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {flight.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button className="text-blue-600 hover:text-blue-900 mr-3">
                      View
                    </button>
                    <button className="text-green-600 hover:text-green-900 mr-3">
                      Edit
                    </button>
                    <button className="text-red-600 hover:text-red-900">
                      Cancel
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderReports = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Analytics Dashboard</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-blue-600">156</div>
            <div className="text-sm text-gray-500">Total Users</div>
            <div className="text-xs text-green-600">+12% from last month</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-green-600">1,247</div>
            <div className="text-sm text-gray-500">Total Flights</div>
            <div className="text-xs text-green-600">+8% from last month</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-purple-600">$125k</div>
            <div className="text-sm text-gray-500">Revenue</div>
            <div className="text-xs text-green-600">+15% from last month</div>
          </div>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Monthly Trends</h3>
        <div className="h-64 bg-gray-100 rounded flex items-center justify-center">
          <p className="text-gray-500">Chart visualization would go here</p>
        </div>
      </div>
    </div>
  );

  const renderRoles = () => (
    <div className="space-y-6">
      {/* Role Management - Only for Super Admins */}
      {currentUserRole === 'super_admin' ? (
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200 bg-white sticky top-0 z-10">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-medium text-gray-900">Role Management</h3>
                <p className="text-sm text-gray-500">Create and manage custom roles</p>
              </div>
              <button 
                onClick={() => setShowAddRoleModal(true)}
                className="px-4 py-2 bg-black text-white rounded-md text-sm hover:bg-gray-800"
              >
                Add Role
              </button>
            </div>
          </div>
          <div className="p-6">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Display Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Permissions</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {[
                    { name: 'super_admin', displayName: 'Super Admin', description: 'Full system access', permissions: ['all'], color: 'bg-purple-100 text-purple-800' },
                    { name: 'base_manager', displayName: 'Base Manager', description: 'Base management access', permissions: ['manage_bases', 'view_users'], color: 'bg-blue-100 text-blue-800' },
                    { name: 'flight_instructor', displayName: 'Flight Instructor', description: 'Flight training access', permissions: ['manage_flights', 'view_students'], color: 'bg-green-100 text-green-800' },
                    { name: 'ppl_pilot', displayName: 'PPL Pilot', description: 'Aircraft rental access', permissions: ['rent_aircraft', 'view_flights'], color: 'bg-orange-100 text-orange-800' },
                    { name: 'student_pilot', displayName: 'Student Pilot', description: 'Training access', permissions: ['view_flights', 'book_lessons'], color: 'bg-gray-100 text-gray-800' },
                    { name: 'admin', displayName: 'Admin', description: 'Limited admin access', permissions: ['view_reports', 'manage_users'], color: 'bg-indigo-100 text-indigo-800' },
                  ].map((role) => (
                    <tr key={role.name}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${role.color}`}>
                          {role.name.toUpperCase()}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {role.displayName}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-500">
                        {role.description}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-500">
                        <div className="flex flex-wrap gap-1">
                          {role.permissions.map((permission, index) => (
                            <span key={index} className="inline-flex px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded">
                              {permission}
                            </span>
                          ))}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex space-x-2">
                          <button 
                            onClick={() => handleEditRole(role)}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            Edit
                          </button>
                          {role.name !== 'super_admin' && (
                            <button 
                              onClick={() => handleDeleteRole(role)}
                              className="text-red-600 hover:text-red-900"
                            >
                              Delete
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow p-6">
          <div className="text-center">
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-sm text-gray-500">Only Super Administrators can access role management.</p>
          </div>
        </div>
      )}
    </div>
  );

  const renderSettings = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">System Settings</h3>
        </div>
        <div className="p-6 space-y-6">
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-4">General Settings</h4>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Company Name</label>
                <input type="text" defaultValue="Cruiser Aviation" className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Contact Email</label>
                <input type="email" defaultValue="admin@cruiseraviation.com" className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Timezone</label>
                <select className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                  <option>UTC-8 (Pacific Time)</option>
                  <option>UTC-5 (Eastern Time)</option>
                  <option>UTC+0 (GMT)</option>
                </select>
              </div>
            </div>
          </div>
          
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-4">Notification Settings</h4>
            <div className="space-y-4">
              <div className="flex items-center">
                <input type="checkbox" defaultChecked className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                <label className="ml-2 block text-sm text-gray-900">Email notifications for new users</label>
              </div>
              <div className="flex items-center">
                <input type="checkbox" defaultChecked className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                <label className="ml-2 block text-sm text-gray-900">SMS notifications for flight updates</label>
              </div>
              <div className="flex items-center">
                <input type="checkbox" className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                <label className="ml-2 block text-sm text-gray-900">Weekly report emails</label>
              </div>
            </div>
          </div>
          
          <div className="pt-4">
            <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Save Settings
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeSection) {
      case 'dashboard':
        return renderDashboard();
      case 'users':
        return renderUsers();
      case 'roles':
        return renderRoles();
      case 'bases':
        return renderBases();
      case 'fleet':
        return renderFleet();
      case 'services':
        return renderServices();
      case 'flights':
        return renderFlights();
      case 'reports':
        return renderReports();
      case 'settings':
        return renderSettings();
      default:
        return renderDashboard();
    }
  };

  return (
    <>
      <Helmet>
        <title>Admin Dashboard - Cruiser Aviation Platform</title>
      </Helmet>
      
      <div className="min-h-screen bg-gray-100">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200">
          <div className="flex items-center justify-between px-6 py-4">
            <div className="flex items-center">
              <button
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                className="p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
              >
                <span className="text-xl">≡</span>
              </button>
              <h1 className="ml-4 text-xl font-semibold text-gray-900">Admin Dashboard</h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="relative">
                <button className="p-2 text-gray-400 hover:text-gray-500">
                  <Bell className="h-5 w-5" />
                </button>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                  <span className="text-sm font-medium text-gray-700">A</span>
                </div>
                <span className="text-sm font-medium text-gray-700">Admin</span>
              </div>
            </div>
          </div>
        </header>

        <div className="flex">
          {/* Sidebar */}
          <div className={`${sidebarCollapsed ? 'w-16' : 'w-64'} bg-white shadow-sm transition-all duration-300 ease-in-out`}>
            <nav className="mt-5 px-2">
              <div className="space-y-1">
                {menuItems.map((item) => (
                  <button
                    key={item.id}
                    onClick={() => setActiveSection(item.id)}
                    className={`${
                      activeSection === item.id
                        ? 'bg-blue-100 text-blue-900'
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    } group flex items-center px-2 py-2 text-sm font-medium rounded-md w-full transition-colors duration-200`}
                  >
                    <item.icon className="mr-3 h-5 w-5" />
                    {!sidebarCollapsed && <span>{item.label}</span>}
                  </button>
                ))}
              </div>
              
              <div className="mt-8 pt-8 border-t border-gray-200">
                <button className="group flex items-center px-2 py-2 text-sm font-medium text-gray-600 hover:bg-gray-50 hover:text-gray-900 rounded-md w-full transition-colors duration-200">
                  <Icons.Logout className="mr-3 h-5 w-5" />
                  {!sidebarCollapsed && <span>Logout</span>}
                </button>
              </div>
            </nav>
          </div>

          {/* Main Content */}
          <div className="flex-1 overflow-hidden">
            <div className="h-full overflow-y-auto p-6">
              {renderContent()}
            </div>
          </div>
        </div>

        {/* Add Base Modal */}
        {showAddBaseModal && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-20 mx-auto border w-11/12 max-w-4xl shadow-lg rounded-md bg-white flex flex-col max-h-[80vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-white rounded-t-md">
                <h3 className="text-lg font-medium text-gray-900">Add New Base</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowAddBaseModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleCreateBase}
                    disabled={isSubmitting || !baseFormData.name.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Creating...' : 'Create Base'}
                  </button>
                  <button
                    onClick={() => setShowAddBaseModal(false)}
                    className="text-gray-400 hover:text-gray-600 ml-2"
                  >
                    <X className="h-6 w-6" />
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Base Name *</label>
                        <input
                          type="text"
                          value={baseFormData.name}
                          onChange={(e) => handleBaseFormChange('name', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., Cruiser Main Base"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">ICAO Code</label>
                        <input
                          type="text"
                          value={baseFormData.icaoCode}
                          onChange={(e) => handleBaseFormChange('icaoCode', e.target.value.toUpperCase())}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., KSFO"
                          maxLength={4}
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea
                          value={baseFormData.description}
                          onChange={(e) => handleBaseFormChange('description', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Brief description of the base"
                          rows={3}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Location Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Location</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                        <input
                          type="text"
                          value={baseFormData.address}
                          onChange={(e) => handleBaseFormChange('address', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Street address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <input
                          type="text"
                          value={baseFormData.city}
                          onChange={(e) => handleBaseFormChange('city', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="City"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Region/State</label>
                        <input
                          type="text"
                          value={baseFormData.region}
                          onChange={(e) => handleBaseFormChange('region', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Region or State"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
                        <input
                          type="text"
                          value={baseFormData.country}
                          onChange={(e) => handleBaseFormChange('country', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Country"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Postal Code</label>
                        <input
                          type="text"
                          value={baseFormData.postalCode}
                          onChange={(e) => handleBaseFormChange('postalCode', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Postal/ZIP code"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">IATA Code</label>
                        <input
                          type="text"
                          value={baseFormData.iataCode}
                          onChange={(e) => handleBaseFormChange('iataCode', e.target.value.toUpperCase())}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., SFO"
                          maxLength={3}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Coordinates */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">GPS Coordinates</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Latitude</label>
                        <input
                          type="number"
                          step="any"
                          value={baseFormData.latitude}
                          onChange={(e) => handleBaseFormChange('latitude', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 37.7749"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Longitude</label>
                        <input
                          type="number"
                          step="any"
                          value={baseFormData.longitude}
                          onChange={(e) => handleBaseFormChange('longitude', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., -122.4194"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Aviation Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Aviation Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Runway Length</label>
                        <input
                          type="text"
                          value={baseFormData.runwayLength}
                          onChange={(e) => handleBaseFormChange('runwayLength', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 11,870 ft"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Runway Surface</label>
                        <input
                          type="text"
                          value={baseFormData.runwaySurface}
                          onChange={(e) => handleBaseFormChange('runwaySurface', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., Asphalt"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Elevation</label>
                        <input
                          type="text"
                          value={baseFormData.elevation}
                          onChange={(e) => handleBaseFormChange('elevation', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 13 ft MSL"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Frequency</label>
                        <input
                          type="text"
                          value={baseFormData.frequency}
                          onChange={(e) => handleBaseFormChange('frequency', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 118.1 MHz"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Operating Hours</label>
                        <input
                          type="text"
                          value={baseFormData.operatingHours}
                          onChange={(e) => handleBaseFormChange('operatingHours', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 24/7 or 6:00 AM - 10:00 PM"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Contact Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Contact Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <input
                          type="tel"
                          value={baseFormData.phone}
                          onChange={(e) => handleBaseFormChange('phone', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Phone number"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input
                          type="email"
                          value={baseFormData.email}
                          onChange={(e) => handleBaseFormChange('email', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Email address"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Website</label>
                        <input
                          type="url"
                          value={baseFormData.website}
                          onChange={(e) => handleBaseFormChange('website', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Website URL"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Status */}
                  <div>
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="isActive"
                        checked={baseFormData.isActive}
                        onChange={(e) => handleBaseFormChange('isActive', e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor="isActive" className="ml-2 block text-sm text-gray-900">
                        Active Base
                      </label>
                    </div>
                  </div>

                  {/* Add/Edit Modal: Image Upload */}
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Base Image</label>
                                      {baseFormData.imageUrl && (
                    <div className="mb-2 w-full aspect-[4/3] bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                      <img src={`${API_URL}${baseFormData.imageUrl}`} alt="Base" className="object-cover w-full h-full" />
                    </div>
                  )}
                    <input
                      type="file"
                      accept="image/*"
                      onChange={e => {
                        if (e.target.files && e.target.files[0]) {
                          handleImageUpload(e.target.files[0]);
                        }
                      }}
                      className="block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                      disabled={imageUploading}
                    />
                    {imageUploading && <div className="text-xs text-blue-600 mt-1">Uploading...</div>}
                    {imageUploadError && <div className="text-xs text-red-600 mt-1">{imageUploadError}</div>}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View Base Modal */}
        {showViewBaseModal && selectedBase && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Base Details</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowViewBaseModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                  >
                    Close
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                {/* Image Preview */}
                {selectedBase.imageUrl && (
                  <div className="mb-6 w-full aspect-[4/3] bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                    <img src={`${API_URL}${selectedBase.imageUrl}`} alt="Base" className="object-cover w-full h-full" />
                  </div>
                )}
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.name}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${selectedBase.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                          {selectedBase.isActive ? 'Active' : 'Inactive'}
                        </span>
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.description || 'No description provided'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Location Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Location</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.address || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.city || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Region</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.region || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.country || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Postal Code</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.postalCode || 'Not specified'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Aviation Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Aviation Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">ICAO Code</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.icaoCode || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">IATA Code</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.iataCode || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Runway Length</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.runwayLength || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Runway Surface</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.runwaySurface || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Elevation</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.elevation || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Frequency</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.frequency || 'Not specified'}</p>
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Operating Hours</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.operatingHours || 'Not specified'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Contact Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Contact Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.phone || 'Not specified'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.email || 'Not specified'}</p>
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Website</label>
                        <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedBase.website || 'Not specified'}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Edit Base Modal */}
        {showEditBaseModal && selectedBase && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Edit Base</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowEditBaseModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleUpdateBase}
                    disabled={isSubmitting || !baseFormData.name.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Updating...' : 'Update Base'}
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                {/* Image Upload */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Base Image</label>
                  {baseFormData.imageUrl && (
                    <div className="mb-2 w-full aspect-[4/3] bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                      <img src={`${API_URL}${baseFormData.imageUrl}`} alt="Base" className="object-cover w-full h-full" />
                    </div>
                  )}
                  <input
                    type="file"
                    accept="image/*"
                    onChange={e => {
                      if (e.target.files && e.target.files[0]) {
                        handleImageUpload(e.target.files[0]);
                      }
                    }}
                    className="block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                    disabled={imageUploading}
                  />
                  {imageUploading && <div className="text-xs text-blue-600 mt-1">Uploading...</div>}
                  {imageUploadError && <div className="text-xs text-red-600 mt-1">{imageUploadError}</div>}
                </div>
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                        <input
                          type="text"
                          value={baseFormData.name}
                          onChange={(e) => handleBaseFormChange('name', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Base name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">ICAO Code</label>
                        <input
                          type="text"
                          value={baseFormData.icaoCode}
                          onChange={(e) => handleBaseFormChange('icaoCode', e.target.value.toUpperCase())}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., KSFO"
                          maxLength={4}
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea
                          value={baseFormData.description}
                          onChange={(e) => handleBaseFormChange('description', e.target.value)}
                          rows={3}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Base description"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Location Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Location Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                        <input
                          type="text"
                          value={baseFormData.address}
                          onChange={(e) => handleBaseFormChange('address', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Full address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <input
                          type="text"
                          value={baseFormData.city}
                          onChange={(e) => handleBaseFormChange('city', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="City"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Region/State</label>
                        <input
                          type="text"
                          value={baseFormData.region}
                          onChange={(e) => handleBaseFormChange('region', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Region or state"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
                        <input
                          type="text"
                          value={baseFormData.country}
                          onChange={(e) => handleBaseFormChange('country', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Country"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Postal Code</label>
                        <input
                          type="text"
                          value={baseFormData.postalCode}
                          onChange={(e) => handleBaseFormChange('postalCode', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Postal/ZIP code"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">IATA Code</label>
                        <input
                          type="text"
                          value={baseFormData.iataCode}
                          onChange={(e) => handleBaseFormChange('iataCode', e.target.value.toUpperCase())}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., SFO"
                          maxLength={3}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Coordinates */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">GPS Coordinates</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Latitude</label>
                        <input
                          type="number"
                          step="any"
                          value={baseFormData.latitude}
                          onChange={(e) => handleBaseFormChange('latitude', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 37.7749"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Longitude</label>
                        <input
                          type="number"
                          step="any"
                          value={baseFormData.longitude}
                          onChange={(e) => handleBaseFormChange('longitude', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., -122.4194"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Aviation Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Aviation Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Runway Length</label>
                        <input
                          type="text"
                          value={baseFormData.runwayLength}
                          onChange={(e) => handleBaseFormChange('runwayLength', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 11,870 ft"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Runway Surface</label>
                        <input
                          type="text"
                          value={baseFormData.runwaySurface}
                          onChange={(e) => handleBaseFormChange('runwaySurface', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., Asphalt"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Elevation</label>
                        <input
                          type="text"
                          value={baseFormData.elevation}
                          onChange={(e) => handleBaseFormChange('elevation', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 13 ft MSL"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Frequency</label>
                        <input
                          type="text"
                          value={baseFormData.frequency}
                          onChange={(e) => handleBaseFormChange('frequency', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 118.1 MHz"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Operating Hours</label>
                        <input
                          type="text"
                          value={baseFormData.operatingHours}
                          onChange={(e) => handleBaseFormChange('operatingHours', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., 24/7 or 6:00 AM - 10:00 PM"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Contact Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Contact Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <input
                          type="tel"
                          value={baseFormData.phone}
                          onChange={(e) => handleBaseFormChange('phone', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Phone number"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input
                          type="email"
                          value={baseFormData.email}
                          onChange={(e) => handleBaseFormChange('email', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Email address"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Website</label>
                        <input
                          type="url"
                          value={baseFormData.website}
                          onChange={(e) => handleBaseFormChange('website', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Website URL"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Status */}
                  <div>
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="editIsActive"
                        checked={baseFormData.isActive}
                        onChange={(e) => handleBaseFormChange('isActive', e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor="editIsActive" className="ml-2 block text-sm text-gray-900">
                        Active Base
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Add User Modal */}
        {showAddUserModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Add New User</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowAddUserModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleCreateUser}
                    disabled={isSubmitting || !userFormData.email.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Creating...' : 'Create User'}
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                        <input
                          type="email"
                          value={userFormData.email}
                          onChange={(e) => handleUserFormChange('email', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Email address"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                        <input
                          type="tel"
                          value={userFormData.phoneNumber}
                          onChange={(e) => handleUserFormChange('phoneNumber', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Phone number"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                        <input
                          type="text"
                          value={userFormData.firstName}
                          onChange={(e) => handleUserFormChange('firstName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="First name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                        <input
                          type="text"
                          value={userFormData.lastName}
                          onChange={(e) => handleUserFormChange('lastName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Last name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Date of Birth</label>
                        <input
                          type="date"
                          value={userFormData.dateOfBirth}
                          onChange={(e) => handleUserFormChange('dateOfBirth', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">National ID</label>
                        <input
                          type="text"
                          value={userFormData.nationalId}
                          onChange={(e) => handleUserFormChange('nationalId', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="National ID number"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Profile Image */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Profile Image</h4>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Upload Image</label>
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              handleUserImageUpload(file);
                            }
                          }}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                        {imageUploading && <p className="text-sm text-blue-600 mt-1">Uploading...</p>}
                        {imageUploadError && <p className="text-sm text-red-600 mt-1">{imageUploadError}</p>}
                      </div>
                      {userFormData.imageUrl && (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Preview</label>
                          <div className="w-32 h-32 rounded-lg overflow-hidden border border-gray-300">
                            <img
                              src={`${API_URL}${userFormData.imageUrl}`}
                              alt="Profile preview"
                              className="w-full h-full object-cover"
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Role and Status */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Role & Status</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                        <select
                          value={userFormData.role}
                          onChange={(e) => handleUserFormChange('role', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="student_pilot">Student Pilot</option>
                          <option value="ppl_pilot">PPL Pilot</option>
                          <option value="flight_instructor">Flight Instructor</option>
                          <option value="base_manager">Base Manager</option>
                          <option value="super_admin">Super Admin</option>
                          <option value="admin">Admin</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select
                          value={userFormData.status}
                          onChange={(e) => handleUserFormChange('status', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="pending">Pending</option>
                          <option value="active">Active</option>
                          <option value="suspended">Suspended</option>
                          <option value="verified">Verified</option>
                        </select>
                      </div>
                    </div>
                  </div>

                  {/* Address Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Address Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                        <input
                          type="text"
                          value={userFormData.address}
                          onChange={(e) => handleUserFormChange('address', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <input
                          type="text"
                          value={userFormData.city}
                          onChange={(e) => handleUserFormChange('city', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="City"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Region/State</label>
                        <input
                          type="text"
                          value={userFormData.region}
                          onChange={(e) => handleUserFormChange('region', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Region/State"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
                        <input
                          type="text"
                          value={userFormData.country}
                          onChange={(e) => handleUserFormChange('country', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Country"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Postal Code</label>
                        <input
                          type="text"
                          value={userFormData.postalCode}
                          onChange={(e) => handleUserFormChange('postalCode', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Postal Code"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Nationality</label>
                        <input
                          type="text"
                          value={userFormData.nationality}
                          onChange={(e) => handleUserFormChange('nationality', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Nationality"
                        />
                      </div>
                    </div>
                  </div>

                  {/* PPL Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">PPL Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Has PPL</label>
                        <select
                          value={userFormData.hasPPL ? 'true' : 'false'}
                          onChange={(e) => handleUserFormChange('hasPPL', e.target.value === 'true')}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="false">No</option>
                          <option value="true">Yes</option>
                        </select>
                      </div>
                      {userFormData.hasPPL && (
                        <>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">PPL Number</label>
                            <input
                              type="text"
                              value={userFormData.pplNumber}
                              onChange={(e) => handleUserFormChange('pplNumber', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="PPL Number"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">PPL Issue Date</label>
                            <input
                              type="date"
                              value={userFormData.pplIssueDate}
                              onChange={(e) => handleUserFormChange('pplIssueDate', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">PPL Expiry Date</label>
                            <input
                              type="date"
                              value={userFormData.pplExpiryDate}
                              onChange={(e) => handleUserFormChange('pplExpiryDate', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Flight Hours */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Flight Hours</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Total Flight Hours</label>
                        <input
                          type="number"
                          value={userFormData.totalFlightHours}
                          onChange={(e) => handleUserFormChange('totalFlightHours', parseFloat(e.target.value) || 0)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="0"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Credited Hours</label>
                        <input
                          type="number"
                          value={userFormData.creditedHours}
                          onChange={(e) => handleUserFormChange('creditedHours', parseFloat(e.target.value) || 0)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="0"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View User Modal */}
        {showViewUserModal && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">User Details</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowViewUserModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                  >
                    Close
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <p className="text-sm text-gray-900">{selectedUser.email}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                        <p className="text-sm text-gray-900">{selectedUser.phoneNumber || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                        <p className="text-sm text-gray-900">{selectedUser.firstName || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                        <p className="text-sm text-gray-900">{selectedUser.lastName || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Date of Birth</label>
                        <p className="text-sm text-gray-900">
                          {selectedUser.dateOfBirth ? new Date(selectedUser.dateOfBirth).toLocaleDateString() : 'N/A'}
                        </p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">National ID</label>
                        <p className="text-sm text-gray-900">{selectedUser.nationalId || 'N/A'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Profile Image */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Profile Image</h4>
                    <div className="w-48 h-48 rounded-lg overflow-hidden border border-gray-300 flex items-center justify-center bg-gray-100">
                      {selectedUser.imageUrl ? (
                        <img
                          src={`${API_URL}${selectedUser.imageUrl}`}
                          alt={`${selectedUser.firstName} ${selectedUser.lastName}`}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gray-200">
                          <span className="text-4xl font-bold text-gray-600">
                            {selectedUser.firstName && selectedUser.lastName ? 
                              `${selectedUser.firstName[0]}${selectedUser.lastName[0]}` : 
                              selectedUser.email[0].toUpperCase()
                            }
                          </span>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Role and Status */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Role & Status</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                        <p className="text-sm text-gray-900">{selectedUser.role?.replace('_', ' ').toUpperCase() || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <p className="text-sm text-gray-900">{selectedUser.status?.toUpperCase() || 'N/A'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Address Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Address Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                        <p className="text-sm text-gray-900">{selectedUser.address || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <p className="text-sm text-gray-900">{selectedUser.city || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Region/State</label>
                        <p className="text-sm text-gray-900">{selectedUser.region || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
                        <p className="text-sm text-gray-900">{selectedUser.country || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Postal Code</label>
                        <p className="text-sm text-gray-900">{selectedUser.postalCode || 'N/A'}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Nationality</label>
                        <p className="text-sm text-gray-900">{selectedUser.nationality || 'N/A'}</p>
                      </div>
                    </div>
                  </div>

                  {/* PPL Information */}
                  {selectedUser.hasPPL && (
                    <div>
                      <h4 className="text-md font-medium text-gray-900 mb-3">PPL Information</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">PPL Number</label>
                          <p className="text-sm text-gray-900">{selectedUser.pplNumber || 'N/A'}</p>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">PPL Issue Date</label>
                          <p className="text-sm text-gray-900">
                            {selectedUser.pplIssueDate ? new Date(selectedUser.pplIssueDate).toLocaleDateString() : 'N/A'}
                          </p>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">PPL Expiry Date</label>
                          <p className="text-sm text-gray-900">
                            {selectedUser.pplExpiryDate ? new Date(selectedUser.pplExpiryDate).toLocaleDateString() : 'N/A'}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Flight Hours */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Flight Hours</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Total Flight Hours</label>
                        <p className="text-sm text-gray-900">{selectedUser.totalFlightHours || 0}</p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Credited Hours</label>
                        <p className="text-sm text-gray-900">{selectedUser.creditedHours || 0}</p>
                      </div>
                    </div>
                  </div>

                  {/* Timestamps */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Account Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Created At</label>
                        <p className="text-sm text-gray-900">
                          {selectedUser.createdAt ? new Date(selectedUser.createdAt).toLocaleString() : 'N/A'}
                        </p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Last Login</label>
                        <p className="text-sm text-gray-900">
                          {selectedUser.lastLoginAt ? new Date(selectedUser.lastLoginAt).toLocaleString() : 'N/A'}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Edit User Modal */}
        {showEditUserModal && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Edit User</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowEditUserModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleUpdateUser}
                    disabled={updatingUser}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                  >
                    {updatingUser ? 'Updating...' : 'Update User'}
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                        <input
                          type="email"
                          value={userFormData.email}
                          onChange={(e) => handleUserFormChange('email', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Email address"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                        <input
                          type="tel"
                          value={userFormData.phoneNumber}
                          onChange={(e) => handleUserFormChange('phoneNumber', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Phone number"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                        <input
                          type="text"
                          value={userFormData.firstName}
                          onChange={(e) => handleUserFormChange('firstName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="First name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                        <input
                          type="text"
                          value={userFormData.lastName}
                          onChange={(e) => handleUserFormChange('lastName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Last name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Date of Birth</label>
                        <input
                          type="date"
                          value={userFormData.dateOfBirth}
                          onChange={(e) => handleUserFormChange('dateOfBirth', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">National ID</label>
                        <input
                          type="text"
                          value={userFormData.nationalId}
                          onChange={(e) => handleUserFormChange('nationalId', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="National ID number"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Profile Image */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Profile Image</h4>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Upload Image</label>
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              handleUserImageUpload(file);
                            }
                          }}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                        {imageUploading && <p className="text-sm text-blue-600 mt-1">Uploading...</p>}
                        {imageUploadError && <p className="text-sm text-red-600 mt-1">{imageUploadError}</p>}
                      </div>
                      {userFormData.imageUrl && (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Preview</label>
                          <div className="w-32 h-32 rounded-lg overflow-hidden border border-gray-300">
                            <img
                              src={`${API_URL}${userFormData.imageUrl}`}
                              alt="Profile preview"
                              className="w-full h-full object-cover"
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Role and Status */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Role & Status</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                        <select
                          value={userFormData.role}
                          onChange={(e) => handleUserFormChange('role', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="student_pilot">Student Pilot</option>
                          <option value="ppl_pilot">PPL Pilot</option>
                          <option value="flight_instructor">Flight Instructor</option>
                          <option value="base_manager">Base Manager</option>
                          <option value="super_admin">Super Admin</option>
                          <option value="admin">Admin</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select
                          value={userFormData.status}
                          onChange={(e) => handleUserFormChange('status', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="pending">Pending</option>
                          <option value="active">Active</option>
                          <option value="suspended">Suspended</option>
                          <option value="verified">Verified</option>
                        </select>
                      </div>
                    </div>
                  </div>

                  {/* Address Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Address Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                        <input
                          type="text"
                          value={userFormData.address}
                          onChange={(e) => handleUserFormChange('address', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <input
                          type="text"
                          value={userFormData.city}
                          onChange={(e) => handleUserFormChange('city', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="City"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Region/State</label>
                        <input
                          type="text"
                          value={userFormData.region}
                          onChange={(e) => handleUserFormChange('region', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Region/State"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
                        <input
                          type="text"
                          value={userFormData.country}
                          onChange={(e) => handleUserFormChange('country', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Country"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Postal Code</label>
                        <input
                          type="text"
                          value={userFormData.postalCode}
                          onChange={(e) => handleUserFormChange('postalCode', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Postal Code"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Nationality</label>
                        <input
                          type="text"
                          value={userFormData.nationality}
                          onChange={(e) => handleUserFormChange('nationality', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Nationality"
                        />
                      </div>
                    </div>
                  </div>

                  {/* PPL Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">PPL Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Has PPL</label>
                        <select
                          value={userFormData.hasPPL ? 'true' : 'false'}
                          onChange={(e) => handleUserFormChange('hasPPL', e.target.value === 'true')}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="false">No</option>
                          <option value="true">Yes</option>
                        </select>
                      </div>
                      {userFormData.hasPPL && (
                        <>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">PPL Number</label>
                            <input
                              type="text"
                              value={userFormData.pplNumber}
                              onChange={(e) => handleUserFormChange('pplNumber', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="PPL Number"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">PPL Issue Date</label>
                            <input
                              type="date"
                              value={userFormData.pplIssueDate}
                              onChange={(e) => handleUserFormChange('pplIssueDate', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">PPL Expiry Date</label>
                            <input
                              type="date"
                              value={userFormData.pplExpiryDate}
                              onChange={(e) => handleUserFormChange('pplExpiryDate', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Flight Hours */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Flight Hours</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Total Flight Hours</label>
                        <input
                          type="number"
                          value={userFormData.totalFlightHours}
                          onChange={(e) => handleUserFormChange('totalFlightHours', parseFloat(e.target.value) || 0)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="0"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Credited Hours</label>
                        <input
                          type="number"
                          value={userFormData.creditedHours}
                          onChange={(e) => handleUserFormChange('creditedHours', parseFloat(e.target.value) || 0)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="0"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Add Role Modal */}
        {showAddRoleModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Add New Role</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowAddRoleModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleCreateRole}
                    disabled={isSubmitting || !roleFormData.name.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Creating...' : 'Create Role'}
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Role Name *</label>
                        <input
                          type="text"
                          value={roleFormData.name}
                          onChange={(e) => handleRoleFormChange('name', e.target.value.toLowerCase().replace(/\s+/g, '_'))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., custom_role"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Display Name *</label>
                        <input
                          type="text"
                          value={roleFormData.displayName}
                          onChange={(e) => handleRoleFormChange('displayName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., Custom Role"
                          required
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea
                          value={roleFormData.description}
                          onChange={(e) => handleRoleFormChange('description', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Role description"
                          rows={3}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Color Selection */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Role Color</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      {[
                        { name: 'Gray', value: 'bg-gray-100 text-gray-800' },
                        { name: 'Blue', value: 'bg-blue-100 text-blue-800' },
                        { name: 'Green', value: 'bg-green-100 text-green-800' },
                        { name: 'Purple', value: 'bg-purple-100 text-purple-800' },
                        { name: 'Orange', value: 'bg-orange-100 text-orange-800' },
                        { name: 'Red', value: 'bg-red-100 text-red-800' },
                        { name: 'Indigo', value: 'bg-indigo-100 text-indigo-800' },
                        { name: 'Pink', value: 'bg-pink-100 text-pink-800' },
                      ].map((color) => (
                        <button
                          key={color.value}
                          onClick={() => handleRoleFormChange('color', color.value)}
                          className={`p-3 rounded-lg border-2 ${
                            roleFormData.color === color.value
                              ? 'border-blue-500'
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full ${color.value}`}>
                            {color.name}
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Permissions */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Permissions</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {[
                        'manage_users',
                        'manage_roles',
                        'manage_bases',
                        'manage_flights',
                        'manage_services',
                        'view_reports',
                        'rent_aircraft',
                        'book_lessons',
                        'view_students',
                        'view_flights'
                      ].map((permission) => (
                        <div key={permission} className="flex items-center">
                          <input
                            type="checkbox"
                            id={permission}
                            checked={roleFormData.permissions.includes(permission)}
                            onChange={(e) => {
                              const newPermissions = e.target.checked
                                ? [...roleFormData.permissions, permission]
                                : roleFormData.permissions.filter(p => p !== permission);
                              handleRoleFormChange('permissions', newPermissions);
                            }}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <label htmlFor={permission} className="ml-2 block text-sm text-gray-900">
                            {permission.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Edit Role Modal */}
        {showEditRoleModal && selectedRole && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Edit Role</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowEditRoleModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleUpdateRole}
                    disabled={isSubmitting || !roleFormData.name.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Updating...' : 'Update Role'}
                  </button>
                </div>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Role Name *</label>
                        <input
                          type="text"
                          value={roleFormData.name}
                          onChange={(e) => handleRoleFormChange('name', e.target.value.toLowerCase().replace(/\s+/g, '_'))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., custom_role"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Display Name *</label>
                        <input
                          type="text"
                          value={roleFormData.displayName}
                          onChange={(e) => handleRoleFormChange('displayName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., Custom Role"
                          required
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea
                          value={roleFormData.description}
                          onChange={(e) => handleRoleFormChange('description', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Role description"
                          rows={3}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Color Selection */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Role Color</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      {[
                        { name: 'Gray', value: 'bg-gray-100 text-gray-800' },
                        { name: 'Blue', value: 'bg-blue-100 text-blue-800' },
                        { name: 'Green', value: 'bg-green-100 text-green-800' },
                        { name: 'Purple', value: 'bg-purple-100 text-purple-800' },
                        { name: 'Orange', value: 'bg-orange-100 text-orange-800' },
                        { name: 'Red', value: 'bg-red-100 text-red-800' },
                        { name: 'Indigo', value: 'bg-indigo-100 text-indigo-800' },
                        { name: 'Pink', value: 'bg-pink-100 text-pink-800' },
                      ].map((color) => (
                        <button
                          key={color.value}
                          onClick={() => handleRoleFormChange('color', color.value)}
                          className={`p-3 rounded-lg border-2 ${
                            roleFormData.color === color.value
                              ? 'border-blue-500'
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full ${color.value}`}>
                            {color.name}
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Permissions */}
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-3">Permissions</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {[
                        'manage_users',
                        'manage_roles',
                        'manage_bases',
                        'manage_flights',
                        'manage_services',
                        'view_reports',
                        'rent_aircraft',
                        'book_lessons',
                        'view_students',
                        'view_flights'
                      ].map((permission) => (
                        <div key={permission} className="flex items-center">
                          <input
                            type="checkbox"
                            id={`edit-${permission}`}
                            checked={roleFormData.permissions.includes(permission)}
                            onChange={(e) => {
                              const newPermissions = e.target.checked
                                ? [...roleFormData.permissions, permission]
                                : roleFormData.permissions.filter(p => p !== permission);
                              handleRoleFormChange('permissions', newPermissions);
                            }}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <label htmlFor={`edit-${permission}`} className="ml-2 block text-sm text-gray-900">
                            {permission.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Add Aircraft Modal */}
        {showAddAircraftModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Add Aircraft</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowAddAircraftModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleCreateAircraft}
                    disabled={isSubmitting || !aircraftFormData.callSign.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Creating...' : 'Create Aircraft'}
                  </button>
                </div>
              </div>
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Call Sign *</label>
                      <input
                        type="text"
                        value={aircraftFormData.callSign}
                        onChange={e => handleAircraftFormChange('callSign', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., YR-CRZ"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                      <input
                        type="text"
                        value={aircraftFormData.type}
                        onChange={e => handleAircraftFormChange('type', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., CRUZ"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Manufacturer</label>
                      <input
                        type="text"
                        value={aircraftFormData.manufacturer}
                        onChange={e => handleAircraftFormChange('manufacturer', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., Cessna"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Model</label>
                      <input
                        type="text"
                        value={aircraftFormData.model}
                        onChange={e => handleAircraftFormChange('model', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 172 Skyhawk"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Aircraft Image</label>
                      <div className="space-y-2">
                        {aircraftFormData.imageUrl && (
                          <div className="w-32 h-24 bg-gray-100 rounded-md overflow-hidden">
                            <img 
                              src={`${API_URL}${aircraftFormData.imageUrl}`} 
                              alt="Aircraft preview" 
                              className="w-full h-full object-cover"
                            />
                          </div>
                        )}
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              handleAircraftImageUpload(file);
                            }
                          }}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Seats</label>
                      <input
                        type="number"
                        value={aircraftFormData.seats}
                        onChange={e => handleAircraftFormChange('seats', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 4"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Max Range (nm)</label>
                      <input
                        type="number"
                        value={aircraftFormData.maxRange}
                        onChange={e => handleAircraftFormChange('maxRange', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 800"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Cruise Speed (kt)</label>
                      <input
                        type="number"
                        value={aircraftFormData.cruiseSpeed}
                        onChange={e => handleAircraftFormChange('cruiseSpeed', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 120"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Fuel Capacity (gal)</label>
                      <input
                        type="number"
                        value={aircraftFormData.fuelCapacity}
                        onChange={e => handleAircraftFormChange('fuelCapacity', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 56"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Year Manufactured</label>
                      <input
                        type="number"
                        value={aircraftFormData.yearManufactured}
                        onChange={e => handleAircraftFormChange('yearManufactured', parseInt(e.target.value) || new Date().getFullYear())}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 2020"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                      <textarea
                        value={aircraftFormData.description}
                        onChange={e => handleAircraftFormChange('description', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Aircraft description"
                        rows={2}
                      />
                    </div>
                    <div className="md:col-span-2 flex items-center mt-2">
                      <input
                        type="checkbox"
                        id="aircraftIsActive"
                        checked={aircraftFormData.isActive}
                        onChange={e => handleAircraftFormChange('isActive', e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor="aircraftIsActive" className="ml-2 block text-sm text-gray-900">
                        Active Aircraft
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Edit Aircraft Modal */}
        {showEditAircraftModal && selectedAircraft && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Edit Aircraft</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowEditAircraftModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                    disabled={isSubmitting}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleUpdateAircraft}
                    disabled={isSubmitting || !aircraftFormData.callSign.trim()}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Updating...' : 'Update Aircraft'}
                  </button>
                </div>
              </div>
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Call Sign *</label>
                      <input
                        type="text"
                        value={aircraftFormData.callSign}
                        onChange={e => handleAircraftFormChange('callSign', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., YR-CRZ"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                      <input
                        type="text"
                        value={aircraftFormData.type}
                        onChange={e => handleAircraftFormChange('type', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., CRUZ"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Manufacturer</label>
                      <input
                        type="text"
                        value={aircraftFormData.manufacturer}
                        onChange={e => handleAircraftFormChange('manufacturer', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., Cessna"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Model</label>
                      <input
                        type="text"
                        value={aircraftFormData.model}
                        onChange={e => handleAircraftFormChange('model', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 172 Skyhawk"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Aircraft Image</label>
                      <div className="space-y-2">
                        {aircraftFormData.imageUrl && (
                          <div className="w-32 h-24 bg-gray-100 rounded-md overflow-hidden">
                            <img 
                              src={`${API_URL}${aircraftFormData.imageUrl}`} 
                              alt="Aircraft preview" 
                              className="w-full h-full object-cover"
                            />
                          </div>
                        )}
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              handleAircraftImageUpload(file);
                            }
                          }}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Seats</label>
                      <input
                        type="number"
                        value={aircraftFormData.seats}
                        onChange={e => handleAircraftFormChange('seats', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 4"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Max Range (nm)</label>
                      <input
                        type="number"
                        value={aircraftFormData.maxRange}
                        onChange={e => handleAircraftFormChange('maxRange', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 800"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Cruise Speed (kt)</label>
                      <input
                        type="number"
                        value={aircraftFormData.cruiseSpeed}
                        onChange={e => handleAircraftFormChange('cruiseSpeed', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 120"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Fuel Capacity (gal)</label>
                      <input
                        type="number"
                        value={aircraftFormData.fuelCapacity}
                        onChange={e => handleAircraftFormChange('fuelCapacity', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 56"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Year Manufactured</label>
                      <input
                        type="number"
                        value={aircraftFormData.yearManufactured}
                        onChange={e => handleAircraftFormChange('yearManufactured', parseInt(e.target.value) || new Date().getFullYear())}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., 2020"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                      <textarea
                        value={aircraftFormData.description}
                        onChange={e => handleAircraftFormChange('description', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Aircraft description"
                        rows={2}
                      />
                    </div>
                    <div className="md:col-span-2 flex items-center mt-2">
                      <input
                        type="checkbox"
                        id="editAircraftIsActive"
                        checked={aircraftFormData.isActive}
                        onChange={e => handleAircraftFormChange('isActive', e.target.checked)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <label htmlFor="editAircraftIsActive" className="ml-2 block text-sm text-gray-900">
                        Active Aircraft
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View Aircraft Modal */}
        {showViewAircraftModal && selectedAircraft && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 flex flex-col max-h-[90vh]">
              {/* Fixed Header */}
              <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white rounded-t-lg">
                <h3 className="text-lg font-medium text-gray-900">Aircraft Details</h3>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setShowViewAircraftModal(false)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                  >
                    Close
                  </button>
                </div>
              </div>
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Call Sign</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.callSign}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.type}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Manufacturer</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.manufacturer}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Model</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.model}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Aircraft Image</label>
                      {selectedAircraft.imageUrl ? (
                        <div className="w-48 h-36 bg-gray-100 rounded-md overflow-hidden">
                          <img 
                            src={`${API_URL}${selectedAircraft.imageUrl}`} 
                            alt={selectedAircraft.callSign} 
                            className="w-full h-full object-cover"
                          />
                        </div>
                      ) : (
                        <div className="w-48 h-36 bg-gray-100 rounded-md flex items-center justify-center">
                          <Plane className="h-12 w-12 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Seats</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.seats}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Max Range (nm)</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.maxRange}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Cruise Speed (kt)</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.cruiseSpeed}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Fuel Capacity (gal)</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.fuelCapacity}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Year Manufactured</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.yearManufactured}</p>
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                      <p className="text-sm text-gray-900 bg-gray-50 px-3 py-2 rounded">{selectedAircraft.description}</p>
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${selectedAircraft.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{selectedAircraft.isActive ? 'Active' : 'Inactive'}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}

export default AdminPage;