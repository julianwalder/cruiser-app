name: Deploy to Staging

on:
  push:
    branches: [dev, staging]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: |
          cd packages/frontend
          npm run build
          
      - name: Generate KV data
        run: |
          cd packages/frontend
          node scripts/upload-kv.js
          
      - name: Setup R2 Bucket for Staging
        run: |
          echo "ü™£ Setting up R2 bucket for staging..."
          chmod +x scripts/setup-staging-r2.sh
          ./scripts/setup-staging-r2.sh
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy D1 Database to Staging
        run: |
          echo "üìä Deploying D1 database to staging..."
          chmod +x scripts/deploy-staging-db.sh
          ./scripts/deploy-staging-db.sh
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Upload KV data to staging
        run: |
          echo "üì¶ Uploading KV data to staging..."
          npx wrangler kv bulk put --binding=STATIC_CONTENT_STAGING --env staging packages/frontend/kv-data.json
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy API Worker to Staging
        run: |
          echo "üöÄ Deploying API worker to staging..."
          npx wrangler@4 deploy --env api-staging
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy Frontend Worker to Staging
        run: |
          echo "üé® Deploying frontend worker to staging..."
          npx wrangler@4 deploy --env staging
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Verify Staging Deployment
        run: |
          echo "üîç Verifying staging deployment..."
          sleep 15
          
          # Test API health
          echo "Testing API health..."
          API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://cruiser-aviation-api-staging.julian-pad.workers.dev/health || echo "000")
          if [ "$API_RESPONSE" = "200" ]; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed (HTTP $API_RESPONSE)"
          fi
          
          # Test frontend
          echo "Testing frontend..."
          FRONTEND_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://cruiser-aviation-frontend-staging.julian-pad.workers.dev/ || echo "000")
          if [ "$FRONTEND_RESPONSE" = "200" ]; then
            echo "‚úÖ Frontend health check passed"
          else
            echo "‚ùå Frontend health check failed (HTTP $FRONTEND_RESPONSE)"
          fi
          
      - name: Notify deployment
        run: |
          echo "‚úÖ Successfully deployed to staging environment!"
          echo ""
          echo "üåç Deployment URLs:"
          echo "  - Frontend: https://cruiser-aviation-frontend-staging.julian-pad.workers.dev"
          echo "  - API: https://cruiser-aviation-api-staging.julian-pad.workers.dev"
          echo ""
          echo "üìä Deployment completed at $(date)"
          echo ""
          echo "üìã Deployment Summary:"
          echo "  - ‚úÖ R2 bucket configured"
          echo "  - ‚úÖ D1 Database schema deployed"
          echo "  - ‚úÖ D1 Database seeded with sample data"
          echo "  - ‚úÖ KV namespace populated"
          echo "  - ‚úÖ API Worker deployed"
          echo "  - ‚úÖ Frontend Worker deployed"
          echo ""
          echo "üîß Environment Details:"
          echo "  - Database: cruiser-db-staging"
          echo "  - Storage: cruiser-storage-staging"
          echo "  - Cache: CACHE_STAGING KV namespace" 