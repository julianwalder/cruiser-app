name: Deploy to Staging

on:
  push:
    branches: [dev, staging]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: |
          cd packages/frontend
          npm run build
          
      - name: Setup R2 Bucket for Staging
        run: |
          echo "ü™£ Setting up R2 bucket for staging..."
          npx wrangler r2 bucket create cruiser-storage-staging --env api-staging || echo "Bucket may already exist"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy D1 Database Schema to Staging
        run: |
          echo "üóÑÔ∏è Deploying D1 database schema to staging..."
          npx wrangler d1 execute cruiser-db-staging --env api-staging --file=packages/frontend/schema.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy API Worker to Staging
        run: |
          echo "üöÄ Deploying API worker to staging..."
          npx wrangler deploy --env api-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy Frontend Worker to Staging
        run: |
          echo "üé® Deploying frontend worker to staging..."
          cd packages/frontend
          npx wrangler deploy --env frontend-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Verify Deployment
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "Staging API: https://api-staging.cruiser-app.workers.dev"
          echo "Staging Frontend: https://frontend-staging.cruiser-app.workers.dev" 